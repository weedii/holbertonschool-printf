./" This the manual page of _printf function in C
.TH _printf "2022-11-10" "_printf man page"_printf

.SH NAME
_printf

.SH SYNOPSIS
int _printf(const char *format, ...);

.SH DESCRIPTION
The functions in the _printf() family produce output according to a format.
Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:
FORMAT controls the output as in C printf.  Interpreted sequences are:

"\\n"     new line

"%%"     a single %

.SH Format of the format char:
_printf("%c", _char);
.SH Format of the format string:
_printf("%s", _string);
.SH Format of the format int:
_printf("%d", _int);
_printf("%i", _int);

.SH Conversion specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:

       d, i   The int argument is converted to signed decimal notation.
              The precision, if any, gives the minimum number of digits
              that must appear; if the converted value requires fewer
              digits, it is padded on the left with zeros.  The default
              precision is 1.  When 0 is printed with an explicit
              precision 0, the output is empty.

        c     If no l modifier is present, the int argument is converted
              to an unsigned char, and the resulting character is
              written.  If an l modifier is present, the wint_t (wide
              character) argument is converted to a multibyte sequence
              by a call to the wcrtomb(3) function, with a conversion
              state starting in the initial state, and the resulting
              multibyte string is written.

        s      If no l modifier is present: the const char * argument is
              expected to be a pointer to an array of character type
              (pointer to a string).  Characters from the array are
              written up to (but not including) a terminating null byte
              ('\0'); if a precision is specified, no more than the
              number specified are written.  If a precision is given, no
              null byte need be present; if the precision is not
              specified, or is greater than the size of the array, the
              array must contain a terminating null byte.

.SH RETURN VALUE
Upon successful return, these functions return the number of
characters printed (excluding the null byte used to end output to strings).

If an output error is encountered, a negative value is returned.